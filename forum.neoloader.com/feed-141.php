<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-gb">
<link rel="self" type="application/atom+xml" href="http://forum.neoloader.com/feed.php?f=168&amp;t=2693" />

<title>NeoLoader Forum</title>
<subtitle>Forum of the NeoLoader P2P Client/Downloader</subtitle>
<link href="http://forum.neoloader.com/index.php" />
<updated>2012-07-29T23:49:08+01:00</updated>

<author><name><![CDATA[NeoLoader Forum]]></name></author>
<id>http://forum.neoloader.com/feed.php?f=168&amp;t=2693</id>
<entry>
<author><name><![CDATA[Ekliptor]]></name></author>
<updated>2012-07-29T23:49:08+01:00</updated>
<published>2012-07-29T23:49:08+01:00</published>
<id>http://forum.neoloader.com/viewtopic.php?t=2693&amp;p=13912#p13912</id>
<link href="http://forum.neoloader.com/viewtopic.php?t=2693&amp;p=13912#p13912"/>
<title type="html"><![CDATA[NeoLoader JavaScript Web API]]></title>

<content type="html" xml:base="http://forum.neoloader.com/viewtopic.php?t=2693&amp;p=13912#p13912"><![CDATA[
NeoLoader can be included into <strong>any website</strong>. You then can communicate with the NeoLoader of your website's visitor through our API.<br /><br />To include the API you have to add the following JavaScript code:<br /><div class="codebox"><p>Code: </p><code>&#91;font=monospace&#93;&lt;script type="text/javascript" src="&#91;URL&#93;http://localhost:1600/WebAPI/api/api.nocache.js&#91;/URL&#93;"&gt;&#91;/font&#93;&#91;font=monospace&#93;&lt;/script&gt;<br />&#91;/font&#93;&#91;font=monospace&#93;&lt;div id="neoLogin"&gt;&#91;/font&#93;&#91;font=monospace&#93;&lt;/div&gt;&#91;/font&#93;</code></div><br />In case you want to include a NeoLoader <span style="text-decoration: underline">running on a domain other than localhost</span>, you have to add the following:<br /><div class="codebox"><p>Code: </p><code>&#91;font=monospace&#93;&lt;script type="text/javascript"&gt;<br />&#91;/font&#93;&#91;font=monospace&#93;if (typeof Neo === "undefined")<br />    Neo = new Object();<br />Neo.address = "http://yourdomain:1600";<br />&lt;/script&gt;<br />&#91;/font&#93;&#91;font=monospace&#93;&lt;script type="text/javascript" src="&#91;url=http://localhost:1600/WebAPI/api/api.nocache.js&#93;http://yourdomain:1600/WebAPI/api/api.nocache.js&#91;/URL&#93;"&gt;&#91;/font&#93;&#91;font=monospace&#93;&lt;/script&gt;<br />&#91;/font&#93;&#91;font=monospace&#93;&lt;div id="neoLogin"&gt;&#91;/font&#93;&#91;font=monospace&#93;&lt;/div&#91;/font&#93;</code></div><br /><br /><br /><br /><span style="font-size: 134%; line-height: normal">The API provides the following functionality:<br /></span><br /><span style="color: #b22222"><span style="font-size: 100%; line-height: normal"><strong>Events:</strong></span></span><br /><strong>Neo.onReady()</strong><br /><div class="codebox"><p>Code: </p><code>&#91;font=monospace&#93;if (typeof Neo === "undefined")&#91;/font&#93;<br />&#91;font=monospace&#93;    Neo = new Object();&#91;/font&#93;<br />&#91;font=courier new&#93;Neo.onReady = function() {&#91;/font&#93;<br />&#91;font=courier new&#93;    // NeoLoader API can now be used...&#91;/font&#93;<br />&#91;font=courier new&#93;}&#91;/font&#93;</code></div><br /><br /><br /><br /><strong><span style="font-size: 100%; line-height: normal"><span style="color: #b22222">Functions:</span><br /></span>Neo.search.startSearch(keyword, network, callback)</strong><br />/**<br />     * Starts a search for a given keyword.<br />     * @param keyword (String) Keyword to search for<br />     * @param network (String) Network to be searched. Allowed values: "Torrent", "MuleKad"<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.search.fetchSeachResults(searchID, callback)<br /></strong>/**<br />     * Gets search results for a given search ID.<br />     * @param searchID (Number) Search ID<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.search.fetchRunningSearches(callback)</strong><br />/**<br />     * Gets all currently open searches.<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.search.destroySearch(searchID)</strong><br />/**<br />     * Destroys an open search.<br />     * @param searchID (Number) Search ID<br />     */<br /><br /><strong>Neo.grabber.startGrabberTask(links, callback)</strong><br />/**<br />     * Starts a new file grabber task, i.e. searches the given links for possible downloads.<br />     * <br />You have to call setFile() with "Grab" as action and the file ID from fetchGrabberTaskResults(*task ID this function returns*) to start downloading a file you grabbed with this function.<br />     * @param links (String) String containing download link(s)<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.grabber.fetchGrabberTaskResults(taskID, callback)</strong><br />/**<br />     * Gets file grabber results for a given task ID.<br />     * @param taskID (Number) Grabber Task ID<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.grabber.fetchRunningGrabberTasks(callback)</strong><br />/**<br />     * Gets all currently open grabber tasks.<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.grabber.destroyGrabberTask(taskID)</strong><br />/**<br />     * Destroys an open grabber task.<br />     * @param taskID (Number) Grabber Task ID<br />     */<br /><br /><strong>Neo.files.deleteFile(id)<br /></strong>/**     * Deletes a file from NeoLoader and hard disk.<br />     * @param id (Number) File ID<br />     */<br /><br /><strong>Neo.files.fetchFiles(state, callback)</strong><br />/**<br />     * Gets all files currently being in the given state.<br />     * @param state (String) Regular Expression String specifying the desired file state(s).<br />     * <br />Acceptable states: Removed, Duplicate, Paused, Started, Stopped, Temp, Pending, Loading, Sharing, Error<br />     * <br />Examples: all Downloads "(Started|Stopped|Paused) Loading", all complete files "(Started|Stopped|Paused) Sharing"<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.files.setFile(id, action, request, callback)</strong><br />/**<br />     * Sets a file to a given state.<br />     * @param id (Number) File ID<br />     * @param action (String) State the file is set to or action which is performed for the file. May be empty (i.e. "").<br />     * <br />Acceptable actions: Start, Pause, Stop, Remove, Delete, MakeTorrent, ClearTorrent, UploadTorrent, Grab, Upload, UploadArchive, RemoveArchive, Check, Cleanup, Reset<br />     * @param request (JavaScriptObject) Request object specifying more details. Usually not needed. May be null.<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.files.addDownloadLinks(filename, links, callback)</strong><br />/**<br />     * Adds download links.<br />     * <br />Unlike startGrabberTask() this function immediately starts downloading the link(s).<br />     * @param filename (String) Name of the file to be created for the given download links.<br />     * @param links (String) download links to add<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.files.addMagnetLinks(links, callback)</strong><br />/**<br />     * Adds Magnet links.<br />     * <br />Unlike startGrabberTask() this function immediately starts downloading the link(s).<br />     * @param links (String) Magnet links to add<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.files.addFiles(files, startDownload, callback)<br /></strong>/**     * Adds torrents or dlc containers to download. You cann call this function directly from JavaScript or add it to an input field of type "file" or a file drop-listener, etc..<br />     * <br />Example: &lt;input type="file" multiple="" onchange="Neo.files.addFiles(this.files, true, {onUpdate: function(json) {...}})"&gt;<br />     * @param files (Object-Array) Files to add<br />     * @param startDownload If &lt;tt&gt;true&lt;/tt&gt;, the download starts immediately. If &lt;tt&gt;false&lt;/tt&gt;, the files are just added to the grabber list and you have to call<br />     * setFile() with "Grab" as action and the file ID from fetchGrabberTaskResults(*task ID this callback returns*) to start downloading.<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.files.getFileDetails(id, callback)<br /></strong>/**     * Gets file details.<br />     * <br />Some of this information is also returned by fetchFiles(), but this function returns more information.<br />     * @param id (Number) File ID<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><strong>Neo.files.getFileLink(id, callback)<br /></strong>/**     * Returns the Neo Magnet download link for this file.<br />     * @param id (Number) File ID<br />     * @param callback (JavaScriptObject) Object receiving results: {onUpdate: function(json) {...}}<br />     */<br /><br /><br /><strong>Example API Call:</strong><br /><div class="codebox"><p>Code: </p><code>&#91;font=monospace&#93;&lt;script type="text/javascript"&gt;<br />&#91;/font&#93;&#91;font=courier new&#93;Neo.files.addMagnetLinks("your-magnet-link...", {<br />    onUpdate: function(json) {<br />        // link has been added, look at json variable for details<br />    }<br />});&#91;/font&#93;<br />&#91;font=monospace&#93;&lt;/script&gt;&#91;/font&#93;</code></div><br /><br /><br /><br /><strong><span style="font-size: 100%; line-height: normal"><span style="color: #b22222">Supported Languages:<br /></span></span></strong>The NeoLoader API is currently available in English and German. To set the language of the API you have to set a cookie in your website.<br />The cookie is called "lang" and acceptable values are "en" and "de". Default will be English (if no language cookie or an unknown value is present).<br /><br /><br /><br />If you have any questions or suggestions concerning our API don't hesitate to ask us.<p>Statistics: Posted by <a href="http://forum.neoloader.com/memberlist.php?mode=viewprofile&amp;u=4324">Ekliptor</a> — Sun Jul 29, 2012 11:49 pm</p><hr />
]]></content>
</entry>
</feed>Fatal: Not able to open ./cache/data_global.php