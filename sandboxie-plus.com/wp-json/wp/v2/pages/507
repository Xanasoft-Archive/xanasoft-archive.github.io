{"id":507,"date":"2020-10-12T17:53:04","date_gmt":"2020-10-12T15:53:04","guid":{"rendered":"https:\/\/xanasoft.com\/?page_id=507"},"modified":"2023-04-29T07:43:14","modified_gmt":"2023-04-29T07:43:14","slug":"sbiedllapi","status":"publish","type":"page","link":"https:\/\/sandboxie-plus.com\/sandboxie\/sbiedllapi\/","title":{"rendered":"SBIE DLL API"},"content":{"rendered":"<h1>SBIE DLL API<\/h1>\n<p>This page describes the callable entrypoints in the <em>SbieDll.dll<\/em> dynamically-linked library (DLL). These entrypoints expose some functionality of Sandboxie that can be accessed programmatically, that is, through other programs rather than through a person interacting with Sandboxie.<\/p>\n<p>There are three aspects to using Sandboxie programmatically:<\/p>\n<ul>\n<li>Driving some functionality using the Start.exe program. See <a href=\"StartCommandLine\">Start Command Line<\/a>.<\/li>\n<li>Injecting custom DLLs into sandboxed programs. See <a href=\"InjectDll\">InjectDll<\/a>.<\/li>\n<li>Calling Sandboxie entrypoints from programs running (sandboxed or not). Described here.<\/li>\n<\/ul>\n<p>The entrypoints described here are all exported by <em>SbieDll.dll<\/em>. To access an entrypoint, you should dynamically load this DLL into your program, and get the address of the desired entrypoint. For example,<\/p>\n<pre><code>        __declspec(dllexport) void __stdcall InjectDllMain(HINSTANCE hSbieDll, ULONG_PTR UnusedParameter)\n    {\n        \/\/\n            \/\/ locate the address of SbieDll_Hook in SbieDll.dll\n            \/\/  \n\n            typedef void *(__stdcall *P_SbieDll_Hook)(\n                    const char *ApiName, void *ApiFunc, void *NewFunc); \n\n            P_SbieDll_Hook p_SbieDll_Hook = GetProcAddress(hSbieDll, &quot;SbieDll_Hook&quot;); \n\n        \/\/\n            \/\/ invoke SbieDll_Hook through the function pointer\n            \/\/  \n\n            p_SbieDll_Hook(...);\n    }   <\/code><\/pre>\n<p>Note the use of <em>InjectDllMain<\/em> (see <a href=\"InjectDll\">Inject Dll<\/a>) to get a handle to the loaded instance of SbieDll. That is the recommended approach. However, using LoadLibrary or GetModuleHandle to look up SbieDll by name is also fine.<\/p>\n<hr \/>\n<h3>Enumerate Sandbox Names<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef LONG (__stdcall *P_SbieApi_EnumBoxes)(\n            LONG index,                 \/\/ initialize to -1\n            WCHAR *box_name);           \/\/ pointer to WCHAR [34]<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieApi_EnumBoxes<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    index [in] specifies which sandbox to return.  Initialize to -1.\n    Sandboxes are enumerated in the order they appear in Sandboxie.ini.\n\n    box_name [out] receives the sandbox name.\n\n    Note:  this function cannot be used by a sandboxed program.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>    Returns the next value to use for the index parameter.\n    Returns -1 when there is nothing left to enumerate.<\/code><\/pre>\n<\/li>\n<li>\n<p>Sample Code:<\/p>\n<\/li>\n<\/ul>\n<pre><code>        WCHAR name[34];\n        int index = -1;\n        while (1) {\n                index = SbieApi_EnumBoxes(index, name);\n                if (index == -1)\n                    break;\n                SandboxNames_StringArray.add(name);\n        }<\/code><\/pre>\n<hr \/>\n<h3>Query Sandbox Paths by Sandbox Name<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef LONG (__stdcall *P_SbieApi_QueryBoxPath)(\n            const WCHAR *box_name,      \/\/ pointer to WCHAR [34]\n            WCHAR *file_path,\n            WCHAR *key_path,\n            WCHAR *ipc_path,\n            ULONG *file_path_len,\n            ULONG *key_path_len,\n            ULONG *ipc_path_len);<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieApi_QueryBoxPath<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    box_name [in] specifies the name of the sandbox for which\n    to return path information.\n\n    file_path [out] receives the path to the root directory of\n    the sandbox, as set by the FileRootPath setting.\n    The buffer receives at most the number of bytes specified\n    by the file_path_len parameter.  Pass NULL to ignore this\n    parameter.\n\n    key_path [out] receives the path to the root key of the\n    sandbox registry, as set by the KeyRootPath setting.\n    The buffer receives at most the number of bytes specified\n    by the key_path_len parameter.  Pass NULL to ignore this\n    parameter.\n\n    ipc_path [out] receives the path to the root object directory\n    of the sandbox, as set by the IpcRootPath setting.\n    The buffer receives at most the number of bytes specified\n    by the ipc_path_len parameter.  Pass NULL to ignore this\n    parameter.\n\n    file_path_len [in\/out] specifies the length in bytes of the\n    file_path buffer.  On return, receives the length in bytes\n    needed to receive a complete buffer.\n\n    key_path_len [in\/out] specifies the length in bytes of the\n    key_path buffer.  On return, receives the length in bytes\n    needed to receive a complete buffer.\n\n    ipc_path_len [in\/out] specifies the length in bytes of the\n    ipc_path buffer.  On return, receives the length in bytes\n    needed to receive a complete buffer.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>    Returns zero on success, a non-zero value on error.<\/code><\/pre>\n<\/li>\n<li>\n<p>Sample Code:<\/p>\n<pre><code>    ULONG FileLen = 0;\n    ULONG KeyLen  = 0;\n    ULONG IpcLen  = 0;\n\n    SbieApi_QueryBoxPath(\n            NULL, NULL, NULL, NULL, &amp;FileLen, &amp;KeyLen, &amp;IpcLen);\n\n    \/\/ note that lengths are returned as the number of bytes,\n    \/\/ rather than number of WCHAR characters\n\n    WCHAR *FileBuf = malloc(FileLen);\n    WCHAR *KeyBuf = malloc(KeyLen);\n    WCHAR *IpcBuf = malloc(IpcLen);\n\n    SbieApi_QueryBoxPath(\n            FileBuf, KeyBuf, IpcBuf, &amp;FileLen, &amp;KeyLen, &amp;IpcLen);\n\n    \/\/ now use wcslen to count the number of characters\n\n    FileLen = wcslen(FileBuf);\n    KeyLen  = wcslen(KeyBuf);\n    IpcLen  = wcslen(IpcBuf);<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Query Sandbox Paths by Process ID<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef LONG (__stdcall *P_SbieApi_QueryProcessPath)(\n            HANDLE process_id,\n            WCHAR *file_path,\n            WCHAR *key_path,\n            WCHAR *ipc_path,\n            ULONG *file_path_len,\n            ULONG *key_path_len,\n            ULONG *ipc_path_len);<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieApi_QueryProcessPath<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    process_id [in] specifies the ID of the sandboxed process to query.\n\n    file_path [out]\n\n    key_path [out]\n\n    ipc_path [out]\n\n    file_path_len [in\/out]\n\n    key_path_len [in\/out]\n\n    ipc_path_len [in\/out]\n\n    The last six parameters are similar to the last six parameters for\n    the QueryBoxPath function, discussed above.  However, QueryProcessPath\n    (this function) returns the sandbox paths that are in use by a running\n    program, whereas QueryBoxPath returns the paths as they are recorded\n    in the Sandboxie configuration.\n\n    Or put another way:  Suppose a sandboxed program starts with PID 124,\n    and then some sandbox path (for instance FileRootPath) is set to a\n    new value.  At this point, QueryBoxPath will return the new value, but\n    QueryProcessPath for PID 124 will return the old value.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>    Returns zero on success, a non-zero value on error.<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Enumerate Running Processes<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef LONG (__stdcall *P_SbieApi_EnumProcessEx)(\n            const WCHAR *box_name,      \/\/ pointer to WCHAR [34]\n            BOOLEAN all_sessions,\n            ULONG which_session,\n            ULONG *boxed_pids);         \/\/ pointer to ULONG [512]<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieApi_EnumProcessEx<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    box_name [in] specifies the name of the sandbox in which\n    processes will be enumerated.\n\n    all_sessions [in] specifies TRUE to enumerate processes in all\n    logon sessions or only in a particular logon session\n\n    which_session [in] specifies the logon session number in which\n    processes will be enumerated.  Ignored if all_sessions if TRUE.\n    Pass the value -1 to specify the current logon session.\n\n    boxed_pids [out] receives the process ID (PID) numbers.\n    The first ULONG receives the number of processes enumerated.\n    The second ULONG receives the first PID, the third ULONG receives\n    the second PID, and so on.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>   Returns zero on success, a non-zero value on error.<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Query Process Information<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef LONG (__stdcall *P_SbieApi_QueryProcess)(\n            HANDLE process_id,\n            WCHAR *box_name,            \/\/ pointer to WCHAR [34]\n            WCHAR *image_name,          \/\/ pointer to WCHAR [96]\n            WCHAR *sid_string,          \/\/ pointer to WCHAR [96]\n            ULONG *session_id);<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieApi_QueryProcess<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    process_id [in] specifies the ID of the sandboxed process to query.\n\n    box_name [out] receives the name of the sandbox in which the\n    process is running.  Pass NULL to ignore this parameter.\n\n    image_name [out] receives the process name.  Pass NULL to ignore\n    this parameter.\n\n    sid_string [out] receives the SID string for the process.\n    Pass NULL to ignore this parameter.\n\n    session_id [out] receives the logon session number in which\n    the process is running.  Pass NULL to ignore this parameter.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>    Returns zero on success, a non-zero value on error.<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Terminate a Single Sandboxed Process<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef BOOLEAN (__stdcall *P_SbieDll_KillOne)(\n            HANDLE process_id);<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieDll_KillOne<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    process_id [in] specifies the process ID for the sandboxed\n    process that should be terminated.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>    Returns TRUE on success, FALSE on failure.\n\n    The target process is terminated by the Sandboxie service\n    (SbieSvc) with exit code 1 through a call to the Windows API\n    TerminateProcess (ProcessId, 1).<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Terminate All Sandboxed Processes<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef BOOLEAN (__stdcall *P_SbieDll_KillAll)(\n            ULONG session_id,\n            const WCHAR *box_name);<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieDll_KillAll<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    session_id [in] specifies the logon session number in which\n    sandboxed programs should be terminated.\n\n    box_name [in] specifies the sandbox name in which sandboxed\n    programs should be terminated.  Specify -1 to indicate the\n    current logon session.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>    Returns TRUE on success, FALSE on failure.\n\n    The target processes are terminated in the fashion described\n    above; see SbieDll_KillOne.<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Query Configuration from Sandboxie.ini<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef LONG (__stdcall *P_SbieApi_QueryConf)(\n            const WCHAR *section_name,  \/\/ pointer to WCHAR [34]\n            const WCHAR *setting_name,  \/\/ pointer to WCHAR [66]\n            ULONG setting_index,\n            WCHAR *value,\n            ULONG value_len)<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieApi_QueryConf<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    section_name [in] specifies the section name that contains\n    the setting to query.\n\n    setting_name [in] specifies the setting name to query.\n\n    setting_index [in] specifies the zero-based index number\n    for a setting that may appear multiple times.  The index\n    number can be logically OR&#039;ed with these special values:\n\n        0x40000000 - do not scan the [GlobalSettings] section\n        if the specified setting name does appear in the\n        specified section.\n\n        0x20000000 - do not expand any variables in the result.\n\n        0x10000000 - ignore any settings that originate from\n        a template (typically defined in the Templates.ini file).\n        only query those settings that appear explicitly in the\n        Sandboxie.ini file.\n\n    value [out] receives the value of the specified setting.\n\n    value_len [in] specifies the maximum length in bytes of\n    the buffer pointed to by the value parameter.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>    Returns zero on success.  Returns 0xC000008B if the setting\n    was not found.  Any other return value indicates some other error.<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Update Configuration in Sandboxie.ini<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef LONG (__stdcall *P_SbieDll_UpdateConf)(\n        WCHAR operation_code,\n        const WCHAR *password,      \/\/ limited to 64 chars\n            const WCHAR *section_name,  \/\/ limited to 32 chars\n            const WCHAR *setting_name,  \/\/ limited to 64 chars\n            const WCHAR *value)         \/\/ limited to 2000 chars<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieDll_UpdateConf<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    operation_code [in] specifies how to update the request setting:\n    &#039;s&#039; to set (overwrite), replacing any existing values\n    &#039;a&#039; to append the new value at the bottom of a list of values\n        (or simply set the new value if there isn&#039;t one already)\n    &#039;i&#039; to insert the new value at the top of a list of values\n        (or simply set the new value if there isn&#039;t one already)\n    &#039;d&#039; to delete an existing value in a list of values\n\n    password [in] specifies the password to use if one is required,\n    or NULL or an empty string otherwise.\n\n    section_name [in] is a required parameter which specifies the\n    section name that contains the setting to set.\n\n    setting_name [in] is a required parameter which specifies the\n    setting name to set.\n\n    value [ini] is an optional parameter specifies the new value.\n\n    If operation_code is &#039;s&#039; and value is omitted, the corresponding\n    setting in the specified section will be deleted.   \n\n    If operation_code is &#039;s&#039; and setting_name is &quot;*&quot; (wildcard star)\n    and value is omitted, this function deletes a complete section\n    from the configuration file.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>    Returns zero on success.<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Reload Configuration from Sandboxie.ini<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef LONG (__stdcall *P_SbieApi_ReloadConf)(\n            ULONG session_id);<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieApi_ReloadConf<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    session_id [in] specifies the logon session number to which\n    Sandboxie will log any error messages.  Pass -1 for the current\n    logon session.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>    Returns zero on success, a non-zero value on error.<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Hook a User-Mode Entrypoint<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>    typedef void *(__stdcall *P_SbieDll_Hook)(\n            const char *name,\n            void *source_func,\n            void *detour_func);<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>    SbieDll_Hook<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>    name [in] specifies an ASCII-string naming the entrypoint to\n    be hooked.  In case of error, SbieDll_Hook logs a Sandboxie\n    error message which includes this descriptive name.\n\n    source_func [in] pointer to the function to hook.\n\n    detour_func [in] pointer to the hook code.\n\n    This function will cause the source function to invoke the detour\n    function.  In other words, the detour function will intercept all\n    calls to the source function.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>    Returns a function pointer which can be used by the detour\n    function to invoke the source function.<\/code><\/pre>\n<\/li>\n<li>\n<p>Sample Code:<\/p>\n<pre><code>   typedef BOOL (__stdcall *P_DeleteFileW)(const WCHAR *Path);\n\n   P_DeleteFileW pDeleteFileW = NULL;\n\n   BOOL __stdcall MyDeleteFileW(const WCHAR *Path)\n    {\n        if (Path[0] == L&#039;C&#039;) {\n\n            \/\/ silently ignore requests to delete any file on drive C\n\n            SetLastError(0);\n            return TRUE;\n\n        } else {\n\n            \/\/ otherwise invoke the original DeleteFileW function\n\n            return pDeleteFileW(Path);\n        }\n    }\n\n    main()\n    {\n        pDeleteFileW = GetProcAddress(kernel32dll, &quot;DeleteFileW&quot;);\n        pDeleteFileW = SbieDll_Hook(&quot;DeleteFile&quot;,\n                                    pDeleteFileW,\n                                    MyDeleteFileW);\n    }<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Register for DLL Load\/Unload Callbacks<\/h3>\n<ul>\n<li>Prototype:\n<pre><code>   typedef void (__stdcall *P_DllCallback)(const WCHAR *ImageName, HMODULE ImageBase);<\/code><\/pre>\n<\/li>\n<\/ul>\n<pre><code>       typedef BOOLEAN *(__stdcall *P_SbieDll_RegisterDllCallback)(\n               P_DllCallback pCallback);<\/code><\/pre>\n<ul>\n<li>\n<p>Export Name:<\/p>\n<pre><code>   SbieDll_RegisterDllCallback\n\n   This API is available starting with version 3.46 of Sandboxie.<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>   pCallback specifies a callback function to be invoked whenever\n   any DLL is loaded or unloaded in the process.  The callback\n   function cannot be unregistered.<\/code><\/pre>\n<\/li>\n<\/ul>\n<pre><code>       The ImageName (first) parameter to the callback function\n       specifies the UNICODE name string for the DLL that was loaded\n       or unloaded.  The name string does not include a path.<\/code><\/pre>\n<pre><code>       The ImageBase (second) parameter to the callback function\n       specifies the load base address for the DLL, when the callback\n       function is invoked to notify of a DLL load.  When the callback\n       function is invoked to notify of a DLL unload, this parameter\n       is set to zero.<\/code><\/pre>\n<ul>\n<li>\n<p>Return Value:<\/p>\n<pre><code>   Returns TRUE on success, FALSE if the callback cannot be registered.\n   As of version 3.46, Sandboxie supports up to 8 registrations within\n   a single process.<\/code><\/pre>\n<\/li>\n<li>\n<ul>\n<li>*<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h3>Get Sandboxie Home Folder<\/h3>\n<ul>\n<li>\n<p>Prototype:<\/p>\n<pre><code>   typedef LONG *(__stdcall *P_SbieApi_GetHomePath)(\n           WCHAR *NtPath,\n           ULONG NtPathMaxLen,\n           WCHAR *DosPath,\n           ULONG DosPathMaxLen);<\/code><\/pre>\n<\/li>\n<li>\n<p>Export Name:<\/p>\n<pre><code>   SbieApi_GetHomePath\n\n   This API is available starting with version 3.52 of Sandboxie.<\/code><\/pre>\n<\/li>\n<li>\n<p>Parameters:<\/p>\n<pre><code>   NtPath specifies a pointer to a buffer which will receive the\n   full path of the Sandboxie installation folder in NT-path syntax.\n\n   NtPathMaxLen specifies the size of the NtPath buffer.  Specify\n   NULL for NtPath and zero for NtPathMaxLen to not receive the\n   NT path.\n\n   DosPath specifies a pointer to a buffer which will receive the\n   full path of the Sandboxie installation folder in DOS-path syntax.\n\n   DosPathMaxLen specifies the size of the DosPath buffer.  Specify\n   NULL for DosPath and zero for DosPathMaxLen to not receive the\n   NT path.<\/code><\/pre>\n<\/li>\n<li>\n<p>Return Value:<\/p>\n<pre><code>   Returns zero on success, a non-zero value on error.\n\n   STATUS_BUFFER_TOO_SMALL (0xC0000023) indicates either NtPathMaxLen\n   or DosPathMaxLen specifies a buffer that is too small.  Increase\n   the size of the input buffer and retry the call.<\/code><\/pre>\n<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>SBIE DLL API This page describes the callable entrypoints in the SbieDll.dll dynamically-linked library (DLL). These entrypoints expose some functionality of Sandboxie that can be accessed programmatically, that is, through other programs rather than through a person interacting with Sandboxie. There are three aspects to using Sandboxie programmatically: Driving some functionality using the Start.exe program. &hellip; <a href=\"https:\/\/sandboxie-plus.com\/sandboxie\/sbiedllapi\/\" class=\"more-link\">Continue reading <span class=\"screen-reader-text\">SBIE DLL API<\/span> <span class=\"meta-nav\">&rarr;<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"parent":108,"menu_order":0,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/sandboxie-plus.com\/wp-json\/wp\/v2\/pages\/507"}],"collection":[{"href":"https:\/\/sandboxie-plus.com\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/sandboxie-plus.com\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/sandboxie-plus.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/sandboxie-plus.com\/wp-json\/wp\/v2\/comments?post=507"}],"version-history":[{"count":2,"href":"https:\/\/sandboxie-plus.com\/wp-json\/wp\/v2\/pages\/507\/revisions"}],"predecessor-version":[{"id":2264,"href":"https:\/\/sandboxie-plus.com\/wp-json\/wp\/v2\/pages\/507\/revisions\/2264"}],"up":[{"embeddable":true,"href":"https:\/\/sandboxie-plus.com\/wp-json\/wp\/v2\/pages\/108"}],"wp:attachment":[{"href":"https:\/\/sandboxie-plus.com\/wp-json\/wp\/v2\/media?parent=507"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}